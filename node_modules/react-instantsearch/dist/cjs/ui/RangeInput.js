"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RangeInput = RangeInput;
var _react = _interopRequireWildcard(require("react"));
var _cx = require("./lib/cx");
var _excluded = ["classNames", "range", "start", "step", "disabled", "onSubmit", "translations"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
// if the default value is undefined, React considers the component uncontrolled initially, which we don't want 0 or NaN as the default value
var unsetNumberInputValue = '';

// Strips leading `0` from a positive number value
function stripLeadingZeroFromInput(value) {
  return value.replace(/^(0+)\d/, function (part) {
    return Number(part).toString();
  });
}
function RangeInput(_ref) {
  var _values$min, _values$max;
  var _ref$classNames = _ref.classNames,
    classNames = _ref$classNames === void 0 ? {} : _ref$classNames,
    _ref$range = _ref.range,
    min = _ref$range.min,
    max = _ref$range.max,
    _ref$start = _slicedToArray(_ref.start, 2),
    minValue = _ref$start[0],
    maxValue = _ref$start[1],
    _ref$step = _ref.step,
    step = _ref$step === void 0 ? 1 : _ref$step,
    disabled = _ref.disabled,
    _onSubmit = _ref.onSubmit,
    translations = _ref.translations,
    props = _objectWithoutProperties(_ref, _excluded);
  var values = {
    min: minValue !== -Infinity && minValue !== min ? minValue : unsetNumberInputValue,
    max: maxValue !== Infinity && maxValue !== max ? maxValue : unsetNumberInputValue
  };
  var _useState = (0, _react.useState)(values),
    _useState2 = _slicedToArray(_useState, 2),
    prevValues = _useState2[0],
    setPrevValues = _useState2[1];
  var _useState3 = (0, _react.useState)({
      from: (_values$min = values.min) === null || _values$min === void 0 ? void 0 : _values$min.toString(),
      to: (_values$max = values.max) === null || _values$max === void 0 ? void 0 : _values$max.toString()
    }),
    _useState4 = _slicedToArray(_useState3, 2),
    _useState4$ = _useState4[0],
    from = _useState4$.from,
    to = _useState4$.to,
    setRange = _useState4[1];
  if (values.min !== prevValues.min || values.max !== prevValues.max) {
    var _values$min2, _values$max2;
    setRange({
      from: (_values$min2 = values.min) === null || _values$min2 === void 0 ? void 0 : _values$min2.toString(),
      to: (_values$max2 = values.max) === null || _values$max2 === void 0 ? void 0 : _values$max2.toString()
    });
    setPrevValues(values);
  }
  return /*#__PURE__*/_react.default.createElement("div", _extends({}, props, {
    className: (0, _cx.cx)((0, _cx.cx)('ais-RangeInput', classNames.root), disabled && (0, _cx.cx)('ais-RangeInput--noRefinement', classNames.noRefinementRoot), props.className)
  }), /*#__PURE__*/_react.default.createElement("form", {
    className: (0, _cx.cx)('ais-RangeInput-form', classNames.form),
    onSubmit: function onSubmit(event) {
      event.preventDefault();
      _onSubmit([from ? Number(from) : undefined, to ? Number(to) : undefined]);
    }
  }, /*#__PURE__*/_react.default.createElement("label", {
    className: (0, _cx.cx)('ais-RangeInput-label', classNames.label)
  }, /*#__PURE__*/_react.default.createElement("input", {
    className: (0, _cx.cx)('ais-RangeInput-input', classNames.input, 'ais-RangeInput-input--min', classNames.inputMin),
    type: "number",
    min: min,
    max: max,
    value: stripLeadingZeroFromInput(from || unsetNumberInputValue),
    step: step,
    placeholder: min === null || min === void 0 ? void 0 : min.toString(),
    disabled: disabled,
    onInput: function onInput(_ref2) {
      var currentTarget = _ref2.currentTarget;
      var value = currentTarget.value;
      setRange({
        from: value || unsetNumberInputValue,
        to: to
      });
    }
  })), /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _cx.cx)('ais-RangeInput-separator', classNames.separator)
  }, translations.separatorElementText), /*#__PURE__*/_react.default.createElement("label", {
    className: (0, _cx.cx)('ais-RangeInput-label', classNames.label)
  }, /*#__PURE__*/_react.default.createElement("input", {
    className: (0, _cx.cx)('ais-RangeInput-input', classNames.input, 'ais-RangeInput-input--max', classNames.inputMax),
    type: "number",
    min: min,
    max: max,
    value: stripLeadingZeroFromInput(to || unsetNumberInputValue),
    step: step,
    placeholder: max === null || max === void 0 ? void 0 : max.toString(),
    disabled: disabled,
    onInput: function onInput(_ref3) {
      var currentTarget = _ref3.currentTarget;
      var value = currentTarget.value;
      setRange({
        from: from,
        to: value || unsetNumberInputValue
      });
    }
  })), /*#__PURE__*/_react.default.createElement("button", {
    className: (0, _cx.cx)('ais-RangeInput-submit', classNames.submit),
    type: "submit"
  }, translations.submitButtonText)));
}