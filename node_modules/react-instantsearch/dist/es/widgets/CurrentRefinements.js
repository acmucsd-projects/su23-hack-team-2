var _excluded = ["includedAttributes", "excludedAttributes", "transformItems"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import { useCurrentRefinements } from 'react-instantsearch-core';
import { CurrentRefinements as CurrentRefinementsUiComponent } from "../ui/CurrentRefinements.js";
export function CurrentRefinements(_ref) {
  var includedAttributes = _ref.includedAttributes,
    excludedAttributes = _ref.excludedAttributes,
    transformItems = _ref.transformItems,
    props = _objectWithoutProperties(_ref, _excluded);
  var _useCurrentRefinement = useCurrentRefinements({
      includedAttributes: includedAttributes,
      excludedAttributes: excludedAttributes,
      transformItems: transformItems
    }, {
      $$widgetType: 'ais.currentRefinements'
    }),
    items = _useCurrentRefinement.items,
    refine = _useCurrentRefinement.refine,
    canRefine = _useCurrentRefinement.canRefine;
  var uiProps = {
    items: items,
    onRemove: refine,
    hasRefinements: canRefine
  };
  return /*#__PURE__*/React.createElement(CurrentRefinementsUiComponent, _extends({}, props, uiProps));
}