var _excluded = ["hit", "attribute", "highlightedTagName", "nonHighlightedTagName", "separator"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { getHighlightedParts, getPropertyByPath, unescape } from "instantsearch.js/es/lib/utils/index.js";
import React from 'react';
import { Highlight as HighlightUiComponent } from "../ui/Highlight.js";
export function Highlight(_ref) {
  var hit = _ref.hit,
    attribute = _ref.attribute,
    highlightedTagName = _ref.highlightedTagName,
    nonHighlightedTagName = _ref.nonHighlightedTagName,
    separator = _ref.separator,
    props = _objectWithoutProperties(_ref, _excluded);
  var property = getPropertyByPath(hit._highlightResult, attribute) || [];
  var properties = Array.isArray(property) ? property : [property];
  var parts = properties.map(function (singleValue) {
    return getHighlightedParts(unescape(singleValue.value || ''));
  });
  return /*#__PURE__*/React.createElement(HighlightUiComponent, _extends({}, props, {
    parts: parts,
    highlightedTagName: highlightedTagName,
    nonHighlightedTagName: nonHighlightedTagName,
    separator: separator
  }));
}