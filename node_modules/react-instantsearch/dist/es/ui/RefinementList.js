var _excluded = ["canRefine", "items", "onRefine", "query", "searchBox", "noResults", "showMore", "canToggleShowMore", "onToggleShowMore", "isShowingMore", "className", "classNames", "translations"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { getHighlightedParts, unescape } from "instantsearch.js/es/lib/utils/index.js";
import React from 'react';
import { Highlight } from "./Highlight.js";
import { cx } from "./lib/cx.js";
import { ShowMoreButton } from "./ShowMoreButton.js";
export function RefinementList(_ref) {
  var canRefine = _ref.canRefine,
    items = _ref.items,
    onRefine = _ref.onRefine,
    query = _ref.query,
    searchBox = _ref.searchBox,
    noResults = _ref.noResults,
    showMore = _ref.showMore,
    canToggleShowMore = _ref.canToggleShowMore,
    onToggleShowMore = _ref.onToggleShowMore,
    isShowingMore = _ref.isShowingMore,
    className = _ref.className,
    _ref$classNames = _ref.classNames,
    classNames = _ref$classNames === void 0 ? {} : _ref$classNames,
    translations = _ref.translations,
    props = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    className: cx('ais-RefinementList', classNames.root, !canRefine && cx('ais-RefinementList--noRefinement', classNames.noRefinementRoot), className)
  }), searchBox && /*#__PURE__*/React.createElement("div", {
    className: cx('ais-RefinementList-searchBox', classNames.searchBox)
  }, searchBox), noResults ? /*#__PURE__*/React.createElement("div", {
    className: cx('ais-RefinementList-noResults', classNames.noResults)
  }, noResults) : /*#__PURE__*/React.createElement("ul", {
    className: cx('ais-RefinementList-list', classNames.list)
  }, items.map(function (item) {
    return /*#__PURE__*/React.createElement("li", {
      key: item.value,
      className: cx('ais-RefinementList-item', classNames.item, item.isRefined && cx('ais-RefinementList-item--selected', classNames.selectedItem))
    }, /*#__PURE__*/React.createElement("label", {
      className: cx('ais-RefinementList-label', classNames.label)
    }, /*#__PURE__*/React.createElement("input", {
      checked: item.isRefined,
      className: cx('ais-RefinementList-checkbox', classNames.checkbox),
      type: "checkbox",
      value: item.value,
      onChange: function onChange() {
        onRefine(item);
      }
    }), /*#__PURE__*/React.createElement("span", {
      className: cx('ais-RefinementList-labelText', classNames.labelText)
    }, query.length > 0 ? /*#__PURE__*/React.createElement(Highlight, {
      parts: [getHighlightedParts(unescape(item.highlighted || ''))]
    }) : item.label), /*#__PURE__*/React.createElement("span", {
      className: cx('ais-RefinementList-count', classNames.count)
    }, item.count)));
  })), showMore && /*#__PURE__*/React.createElement(ShowMoreButton, {
    className: cx('ais-RefinementList-showMore', classNames.showMore, !canToggleShowMore && cx('ais-RefinementList-showMore--disabled', classNames.disabledShowMore)),
    disabled: !canToggleShowMore,
    onClick: onToggleShowMore,
    isShowingMore: isShowingMore,
    translations: translations
  }));
}